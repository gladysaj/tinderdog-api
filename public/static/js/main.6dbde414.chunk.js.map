{"version":3,"sources":["services/dogService.js","components/DogCard/index.js","components/FloatingAction/index.js","components/FosterCard/index.js","components/FosterDogs/index.js","services/authServices.js","AppContext.js","components/AuthForm/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","withCredentials","getDog","id","get","getDogs","Card","image","name","breed","age","description","className","uk-grid","src","alt","uk-cover","FloatingAction","to","this","props","link","uk-icon","icon","Component","FosterCard","DogCard","refreshDog","like","default","login","credential","post","signup","AppContext","createContext","AuthForm","state","data","showPassword","handleShowPassword","showValue","setState","handleChange","e","target","value","handleSubmit","preventDefault","setUser","context","history","isLogin","location","pathname","nextRoute","then","res","user","localStorage","setItem","JSON","stringify","push","catch","err","UIKit","notification","message","response","msg","status","pos","onSubmit","htmlFor","onChange","type","required","onClick","contextType","App","parse","getItem","console","log","Boolean","window","hostname","match","use","Icons","WithRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.6dbde414.chunk.js","sourcesContent":["import axios from 'axios';\n\n// needed to send credentials to cookie so login is not lost with url change\naxios.defaults.withCredentials = true;\n\nexport const getDog = (id) => {\n    return axios.get(`http://localhost:3000/api/foster/${id}`);\n}\n\nexport const getDogs = () => {\n    return axios.get(\"http://localhost:3000/api/foster\")\n}","import React from \"react\";\n\n// this is destructuring the props object e.g. props.image\nconst Card = ({ image, name, breed, age, description }) => {\n  return (\n    <div\n      className=\"uk-child-width-1-3@m uk-child-width-1-2@s uk-flex-center uk-padding-small uk-text-left\"\n      uk-grid=\"true\"\n    >\n      <div>\n        <div className=\"uk-card uk-card-default uk-cover-container\">\n          <div className=\"uk-card-body uk-light uk-margin-xxlarge-top uk-overlay\">\n            <h2 className=\"uk-text-bold uk-text-left uk-text-xlarge\">{name}</h2>\n            <div className=\"uk-flex\">\n              <p className=\"uk-pill uk-text-left uk-text-small uk-text-bold uk-text-uppercase uk-background-primary\">\n                {breed}\n              </p>\n\n              <p className=\"uk-pill uk-text-left uk-text-small uk-text-bold uk-text-uppercase uk-background-primary\">\n                {age}\n              </p>\n            </div>\n\n            <p className=\"uk-text-left uk-text-emphasis\">{description}</p>\n          </div>\n          <img src={image} alt={name} uk-cover=\"true\" className=\"bg-img\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass FloatingAction extends Component {\n    render() {\n        return(\n            <Link className=\"uk-button uk-button-default floating-action\" to={this.props.link}><span uk-icon={\"icon:\" + this.props.icon}></span></Link>\n        )\n    }\n}\n\nexport default FloatingAction;","import React, { Component } from \"react\";\nimport DogCard from \"../DogCard\";\nimport FloatingAction from \"../FloatingAction\";\n\nclass FosterCard extends Component {\n  render() {\n    return (\n      <div className=\"card-container uk-margin-large-bottom\">\n        <DogCard\n          image={this.props.image}\n          name={this.props.name}\n          breed={this.props.breed}\n          age={this.props.age}\n          description={this.props.description}\n        />\n\n        <div className=\"uk-button-group floating-group uk-position-bottom-center\">\n          <FloatingAction icon=\"refresh\" link={this.props.refreshDog} />\n          <FloatingAction icon=\"heart\" link={this.props.like} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FosterCard;\n","import React, { Component } from \"react\";\nimport { getDog, getDogs } from \"../../services/dogService\";\nimport FosterCard from \"../FosterCard\";\n\nclass FosterDogs extends Component {\n  state = {\n    dog: {},\n    data: [],\n    randomDogId: \"\",\n  };\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n\n    getDog(id).then((res) => {\n      const { result: dog } = res.data;\n      this.setState({ dog });\n    });\n\n    getDogs().then((res) => {\n      this.setState({ data: res.data });\n\n      let randomDog = this.state.data.results[\n        Math.floor(Math.random() * this.state.data.results.length)\n      ];\n\n      this.setState({ randomDogId: randomDog._id });\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(nextProps.match, this.props.match);\n\n    if (nextProps.match.params.id !== this.props.match.params.id) {\n      const { id } = nextProps.match.params;\n\n      getDog(id).then((res) => {\n        const { result: dog } = res.data;\n        this.setState({ dog });\n      });\n\n      getDogs().then((res) => {\n        this.setState({ data: res.data });\n\n        let randomDog = this.state.data.results[\n          Math.floor(Math.random() * this.state.data.results.length)\n        ];\n\n        this.setState({ randomDogId: randomDog._id });\n      });\n    }\n  }\n\n  render() {\n    return (\n      <section>\n        <h1 className=\"uk-margin-medium-top uk-text-bold uk-text-primary\">\n          Adopt a Dog\n        </h1>\n        {/* this needs to be populated dynamically with DB */}\n        <FosterCard\n          image={this.state.dog.image}\n          name={\n            this.state.dog.name +\n            \" \" +\n            (this.state.dog.gender === \"Female\" ? \"♀\" : \"♂\")\n          }\n          breed={this.state.dog.breed}\n          age={this.state.dog.age}\n          description={this.state.dog.description}\n          refreshDog={\"/foster/\" + this.state.randomDogId}\n          like=\"\"\n        />\n      </section>\n    );\n  }\n}\n\nexport default FosterDogs;\n","import axios from \"axios\";\n\naxios.default.withCredentials = true;\n\nexport const login = (credential) => {\n  return axios.post(\"http://localhost:3000/api/login\", credential);\n};\n\nexport const signup = (credential) => {\n  return axios.post(\"http://localhost:3000/signup\", credential);\n};\n","import { createContext } from 'react';\n\nconst AppContext = createContext();\n\nexport default AppContext;","import React, { Component } from \"react\";\nimport { login, signup } from \"../../services/authServices\";\nimport { Link } from \"react-router-dom\";\nimport AppContext from \"../../AppContext\";\nimport UIKit from \"uikit\";\n\nclass AuthForm extends Component {\n  state = {\n    data: {},\n    showPassword: false,\n  };\n\n  handleShowPassword = () => {\n    const { showPassword } = this.state;\n    const showValue = !showPassword;\n    this.setState({ showPassword: showValue });\n  };\n\n  handleChange = (e) => {\n    let { data } = this.state;\n    // spread operator allows for persistend data -> adding the key and value to the same object\n    // \"name\" is the attribute in the form field, \"value\" is whatever value the field contains at the time\n    data = { ...data, [e.target.name]: e.target.value };\n    this.setState({ data });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const { data } = this.state;\n    const { setUser } = this.context;\n    const { history } = this.props;\n    const isLogin = this.props.location.pathname === \"/login\";\n\n    // return the service depending on the pathname\n    const action = isLogin ? login : signup;\n    const nextRoute = isLogin ? \"/foster/5ec3330e27cd000c7db3fec7\" : \"login\";\n\n    // convert credentials to string and save in local storage\n    action(data)\n      .then((res) => {\n        const { user } = res.data;\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        setUser(user);\n\n        history.push(nextRoute);\n      })\n      .catch((err) => {\n        // Handle errors on front-end with UIKit\n        UIKit.notification({\n          message: `<span uk-icon='icon: close'></span> ${err.response.data.msg}`,\n          status: \"warning\",\n          pos: \"top-right\",\n        });\n      });\n  };\n\n  render() {\n    // Compare with the props returned by react-router-dom\n    const isLogin = this.props.location.pathname === \"/login\";\n\n    return (\n      <section className=\"uk-section\">\n        <div className=\"uk-container uk-flex uk-flex-center\">\n          <div className=\"uk-width-1-4\">\n            <h1>{isLogin ? \"Login\" : \"Signup\"}</h1>\n\n            <form\n              onSubmit={this.handleSubmit}\n              className=\"uk-width-1-1 uk-form-stacked uk-flex uk-flex-center uk-flex-column\"\n            >\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\" htmlFor=\"email\">\n                  Email:\n                </label>\n                <div className=\"uk-inline\">\n                  <span\n                    className=\"uk-form-icon uk-form-icon-flip\"\n                    uk-icon=\"icon: mail\"\n                  ></span>\n                  <input\n                    onChange={this.handleChange}\n                    id=\"email\"\n                    name=\"email\"\n                    className=\"uk-input\"\n                    type=\"text\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label className=\"uk-form-label\" htmlFor=\"password\">\n                    Password:\n                  </label>\n                  <div className=\"uk-inline\">\n                    <span\n                      className=\"uk-form-icon uk-form-icon-flip\"\n                      uk-icon=\"icon: lock\"\n                    ></span>\n                    <input\n                      onChange={this.handleChange}\n                      id=\"password\"\n                      name=\"password\"\n                      className=\"uk-input\"\n                      type={this.state.showPassword ? \"text\" : \"password\"}\n                      required\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <p\n                className=\"uk-text-meta uk-text-primary cursor-pointer\"\n                onClick={this.handleShowPassword}\n              >\n                Show password\n              </p>\n\n              <button className=\"uk-button uk-button-primary\">\n                {isLogin ? \"Login\" : \"Signup\"}\n              </button>\n\n              {isLogin ? (\n                <div className=\"uk-text-meta uk-margin-top\">\n                  Not a member yet?{\" \"}\n                  <Link to=\"/signup\" className=\"uk-text-primary\">\n                    Signup here\n                  </Link>\n                </div>\n              ) : null}\n            </form>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nAuthForm.contextType = AppContext;\n\nexport default AuthForm;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/NavBar';\nimport Routes from './Routes';\nimport AppContext from './AppContext'\n\nclass App extends Component {\n\n  state = {\n    user: JSON.parse(localStorage.getItem(\"user\")) || {}\n  }\n\n  setUser = (user) => {\n    console.log(\"set user\", user)\n    this.setState({ user });\n  }\n\n  render() {\n    const { state, setUser } = this;\n\n    return (\n      // wrap the app in the context provider so the whole app has access to the data\n      <AppContext.Provider value={{ state: state, setUser }}>\n        <div className=\"App\">\n          <Navbar />\n          <Routes />\n        </div>\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\n// UIKit\nimport UIKit from \"uikit\";\nimport Icons from \"uikit/dist/js/uikit-icons\";\nimport './theme/Custom.scss';\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nUIKit.use(Icons);\n\nconst WithRouter = () => (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\nReactDOM.render(<WithRouter />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}